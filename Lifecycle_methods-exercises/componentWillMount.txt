Use the Lifecycle Method componentWillMount

React components have several special methods that provide opportunities
 to perform actions at specific points in the lifecycle of a component.
 These are called lifecycle methods, or lifecycle hooks, and allow you to
 catch components at certain points in time. This can be before they are rendered,
 before they update, before they receive props, before they unmount, and so on.

 Here is a list of some of the main lifecycle methods: 
componentWillMount() 
componentDidMount() 
shouldComponentUpdate() 
componentDidUpdate() 
componentWillUnmount() 

The next several lessons will cover some of the basic use cases for these lifecycle methods.

Note: The componentWillMount Lifecycle method will be deprecated
 in a future version of 16.X and removed in version 17.

// None of this Methods are still usefull

_________________________________________________________________

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  componentWillMount() {
    // Change code below this line
  console.log(MyComponent)
    // Change code above this line
  }
  render() {
    return <div />
  }
};


// This is an basic example of what componentWillMount() Do.

// The componentWillMount() method is no longer used.

__________________________________________________________________

__________________________________________________________________



Use the Lifecycle Method componentDidMount

Most web developers, at some point, need to call an API endpoint to retrieve data.
 If you're working with React, it's important to know where to perform this action.

The best practice with React is to place API calls or any calls to your server in 
the lifecycle method componentDidMount(). 
This method is called after a component is mounted to the DOM. 
Any calls to setState() here will trigger a re-rendering of your component. 
When you call an API in this method, and set your state with the data that the API returns, 
it will automatically trigger an update once you receive the data.


__________________________________________________________________

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500);
  }
  render() {
    return (
      <div>
        {/* Change code below this line */}
        <h1>Active Users: {this.state.activeUsers}</h1>
        {/* Change code above this line */}
      </div>
    );
  }
}

__________________________________________________________________

__________________________________________________________________


Add Event Listeners

The componentDidMount() method is also the best place to attach any event listeners 
you need to add for specific functionality. 
React provides a synthetic event system which wraps the native event system present 
in browsers. This means that the synthetic event system behaves exactly the same 
regardless of the user's browser - even if the native events may behave differently 
between different browsers.

You've already been using some of these synthetic event handlers such as onClick(). 
React's synthetic event system is great to use for most interactions you'll manage on DOM elements. 
However, if you want to attach an event handler to the document or window objects, you have to do this directly.


===

Attach an event listener in the componentDidMount() method for keydown events and have 
these events trigger the callback handleKeyPress(). 

You can use document.addEventListener() which takes the event (in quotes) as the first argument 
and the callback as the second argument.

Then, in componentWillUnmount(), remove this same event listener. 
You can pass the same arguments to document.removeEventListener(). 
It's good practice to use this lifecycle method to do any clean up on 
React components before they are unmounted and destroyed. 
Removing event listeners is an example of one such clean up action.


__________________________________________________________________


class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // Change code below this line
  componentDidMount() {
document.addEventListener("keydown", this.handleKeyPress);
  }
  componentWillUnmount() {
 document.removeEventListener("keydown", this.handleKeyPress)
  }
  // Change code above this line
  handleEnter() {
    this.setState((state) => ({
      message: state.message + 'You pressed the enter key! '
    }));
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};



__________________________________________________________________

__________________________________________________________________


